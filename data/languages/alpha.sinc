# sleigh specification file for DEC Alpha
#
# Copyright (c) 2024 by Klaus KÃ¤mpf <kkaempf@gmail.com>
#
# Licensed under the Apache 2.0 license
#


#--------------------------------------------------------------------------
# Spaces

define endian=little;
define alignment=1;
define space ram      type=ram_space      size=8  wordsize=1 default;
define space register type=register_space size=8;

#--------------------------------------------------------------------------
# Registers
@if defined(VMS)
# integer registers - OpenVMS
define register offset=0x00 size=8 [ R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10 R11 R12 R13 R14 R15
                                     R16 R17 R18 R19 R20 R21 R22 R23 R24 AI  RA  PV  R28 FP  SP  RZ ];
# floating point registers
define register offset=0x100 size=8 [ F0  F1  F2  F3  F4  F5  F6  F7  F8  F9  F10 F11 F12 F13 F14 F15
                                      F16 F17 F18 F19 F20 F21 F22 F23 F24 F25 F26 F27 F28 F29 F30 FZ ];
@endif

@if defined(UNIX)
# integer registers - Digital UNIX
# names according to Alpha Architecture Reference, II-B
define register offset=0x00 size=8 [ v0  t0  t1  t2  t3  t4  t5  t6  t7  s0  s1  s2  s3  s4  s5  FP
                                     a0  a1  a2  a3  a4  a5  t8  t9  t10 t11 ra  pv  at  GP  SP  zero ];
# floating point registers
define register offset=0x100 size=8 [ f0  f1  f2  f3  f4  f5  f6  f7  f8  f9  f10 f11 f12 f13 f14 f15
                                      f16 f17 f18 f19 f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 f30 fzero ];
@endif

@if defined(NT)
# integer registers - Windows NT
# names according to Alpha Architecture Reference, II-C
define register offset=0x00 size=8 [ v0  t0  t1  t2  t3  t4  t5  t6  t7  s0  s1  s2  s3  s4  s5  fp
                                     a0  a1  a2  a3  a4  a5  t8  t9  t10 t11 ra  t12 at  gp  sp  zero ];
# floating point registers
define register offset=0x100 size=8 [ f0  f1  f2  f3  f4  f5  f6  f7  f8  f9  f10 f11 f12 f13 f14 f15
                                      f16 f17 f18 f19 f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 f30 fzero ];
@endif

# program counter
define register offset=0x200 size=8 [ PC ];

# variables
define register offset=0x208 size=8 [ loc ];

@if defined(21064)
# 21064 Ibox registers
define register offset=0x300 size=8 [ TB_TAG ITB_PTE ICCSR   ITB_PTE_TEMP EXC_ADDR SL_RCV ITBZAP  ITBASM
                                      ITBIS  PS      EXC_SUM PAL_BASE     HIRR     SIRR   ASTRR   Ibox15
				      HIER   SIER    ASTER   SL_CLR       Ibox20   Ibox21 SL_XMIT Ibox23
				      Ibox24 Ibox25  Ibox26  Ibox27       Ibox28   Ibox29 Ibox30  Ibox31 ];
# 21064 Abox registers
define register offset=0x400 size=8 [ TB_CTL Abox1    WDTB_PTE DTB_PTE_TEMP  MM_CSR  VA        DTBZAP   DTBASM
                                      DTBIS  BIU_ADDR BIU_STAT Abox11
@if defined(21064A)
				                                             C_STAT
@else
                                                                             DC_STAT
@endif
                                                                                    FILL_ADDR ABOX_CTL ALT_MODE
                                      CC     CC_CTL   BIU_CTL  FILL_SYNDROME BC_TAG FLUSH_IC  Abox22   FLUSH_IC_ASM
				      Abox24 Abox25   Abox26   Abox27        Abox28 Abox29    Abox30   Abox31 ];

# simulate HW_LD and HW_ST flags as registers
#	phys   = (15, 15) # hw_ld physical
#	alt    = (14, 14) # hw_ld alt mode
#	rwc    = (13, 13) # hw_ld read-with-write check
#       quad   = (12, 12) # hw_ld quadword
#                                     0      1    2     3    4     5     6     7
define register offset=0x500 size=1 [ _      l    v    lv    q    lq    vq    lvq
                                      w     wl   wv   wlv   wq   wlq   wvq   wlvq
				      a     al   av   alv   aq   alq   avq   alvq
				      aw   awl  awv  awlv  awq  awlq  awvq  awlvq
                                      p     pl   vp   plv   pq   plq   vpq   plvq
                                      pw   pwl  pwv  pwlv  pwq  pwlq  pwvq  pwlvq
				      pa   pal  pav  palv  paq  palq  pavq  palvq
				      paw pawl pawv pawlv pawq pawlq pawvq pawlvq ];



@endif

# Paltemp registers
define register offset=0x600 size=8 [ PalTemp0  PalTemp1  PalTemp2  PalTemp3  PalTemp4  PalTemp5  PalTemp6  PalTemp7
                                      PalTemp8  PalTemp9  PalTemp10 PalTemp11 palTemp12 PalTemp13 PalTemp14 PalTemp15
				      PalTemp16 PalTemp17 palTemp18 PalTemp19 PalTemp20 PalTemp21 PalTemp22 PalTemp23
				      PalTemp24 PalTemp25 PalTemp26 PalTemp27 PalTemp28 PalTemp29 palTemp30 PalTemp31 ];

@if defined(21164)
# internal processor registers (IPRs)
define register offset=0x300 size=8 [ ISR  ITB_TAG      ITB_PTE        ITB_ASN  ITB_PTE_TEMP ITB_IA    ITB_IAP  ITB_IS
                                      SIRR ASTRR        ASTER          EXC_ADDR EXC_SUM      EXC_MASK  PAL_BASE ICM
                                      IPLR INTID        IFAULT_VA_FORM IVPTBR   IPR_114      HWINT_CLR SL_XMIT  SL_RCV
				      ICSR IC_FLUSH_CTL ICPERR_STAT    IPR_11B  PMCTR ];

define register offset=0x500 size=8 [ DTB_ASNW200E0 DTB_CM  DTB_TAG      DTB_PTE     DTB_PTE_TEMP MM_STAT          VA      VA_FORM
                                      MVPTBR        DTB_IAP DTB_IA       DTB_IS      ALT_MODE     CC               CC_CTL  MCSR
				      DC_FLUSH      IPR_211 DC_PERR_STAT DC_TEST_CTL DC_TEST_TAG  DC_TEST_TAG_TEMP DC_MODE MAF_MODE ];

# simulate HW_LD and HW_ST flags as registers
#	phys   = (15, 15) # hw_ld physical
#	alt    = (14, 14) # hw_ld alt mode
#	wrtck  = (13, 13) # hw_ld write check
#       quad   = (12, 12) # hw_ld quadword
#	vpte   = (11, 11) # hw_ld virtual pte fetch
#	lock   = (10, 10) # hw_ld load lock
#                                     0      1    2     3    4     5     6     7
define register offset=0x500 size=1 [ _      l    v    lv    q    lq    vq    lvq
                                      w     wl   wv   wlv   wq   wlq   wvq   wlvq
				      a     al   av   alv   aq   alq   avq   alvq
				      aw   awl  awv  awlv  awq  awlq  awvq  awlvq
                                      p     pl   vp   plv   pq   plq   vpq   plvq
                                      pw   pwl  pwv  pwlv  pwq  pwlq  pwvq  pwlvq
				      pa   pal  pav  palv  paq  palq  pavq  palvq
				      paw pawl pawv pawlv pawq pawlq pawvq pawlvq ];



#	phys   = (15, 15) # hw_st physical
#	alt    = (14, 14) # hw_st alt mode
#	mbz    = (13, 13) # hw_st must be zero
#       quad   = (12, 12) # hw_st quadword
#	mbz    = (11, 11) # hw_st must be zero
#	cond   = (10, 10) # hw_st conditional
@endif # 21164

#--------------------------------------------------------------------------
# Macros

macro Bexpr(reg,expr,target) {
  local tmp:1 = expr;
  if (!(tmp)) goto <cont>;
  reg = inst_next;
  goto [target];
<cont>
}

#--------------------------------------------------------------------------
# Tokens

# Instruction format
define token inst (32)
        opcode = (26, 31)
        bcode  = (30, 31) # branch code
        is_i   = (29, 29) # int flag for branch
        ccode  = (26, 28) # condition code
        pcode  = ( 0, 25) dec # Palcode
        rega   = (21, 25) # Register a
        fa     = (21, 25) # Floating-Point Register a
        bdisp  = ( 0, 20) signed # branch displacement
        regb   = (16, 20) # Register b
        mfunc  = ( 0, 15) # memory format with function code
        mdisp  = ( 0, 15) signed dec # memory displacement
	ipr    = ( 0, 15) # internal processor register (PAL 19/1D)
        jop    = (14, 15) # jump opcode
        jdisp  = ( 0, 13) signed # jump displacement
        sbz    = (13, 15) # should be zero
        ldst   = (10, 15) # PAL load/store flags
        lit    = (13, 20) signed dec # literal
        is_lit = (12, 12) # bit 12: 0->SBZ, 1->LIT
	phy    = (15, 15) # HW physical(1)/virtual(0) access
	alt    = (14, 14) # HW ALT_MODE ?
	rwc    = (13, 13) # HW read-with-write check
	qw     = (12, 12) # HW quad word ?
	hwdisp = ( 0, 11) # displacement of 21064 HW_LD/HW_ST
        ofunc  = ( 5, 11) # operate function
	paltmp = ( 7,  7) # 21064 PAL 19/1D ref to PALtemp
	abx    = ( 6,  6) # 21064 PAL 19/1D ref to Abox
	ibx    = ( 5,  5) # 21064 PAL 19/1D ref to Ibox
	pdisp  = ( 0,  9) signed # pal displacement
        regc   = ( 0,  4) # Register c
	ibox   = ( 0,  4) # 21064 PAL 19/1D Ibox register
	abox   = ( 0,  4) # 21064 PAL 19/1D Abox register
	tmpidx = ( 0,  4) dec # 21064 PAL 19/1D PALtemp register
;

#--------------------------------------------------------------------------
# Variables

@if defined(VMS)
attach variables [ rega regb regc ] [ R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10 R11 R12 R13 R14 R15
                                      R16 R17 R18 R19 R20 R21 R22 R23 R24 AI  RA  PV  R28 FP  SP  RZ ];
attach variables [ fa ]   [ F0  F1  F2  F3  F4  F5  F6  F7  F8  F9  F10 F11 F12 F13 F14 F15
                            F16 F17 F18 F19 F20 F21 F22 F23 F24 F25 F26 F27 F28 F29 F30 FZ ];
@endif

@if defined(UNIX)
attach variables [ rega regb regc ] [ v0  t0  t1  t2  t3  t4  t5  t6  t7  s0  s1  s2  s3  s4  s5  FP
                                      a0  a1  a2  a3  a4  a5  t8  t9  t10 t11 ra  pv  at  GP  SP  zero ];
attach variables [ fa ]   [ f0  f1  f2  f3  f4  f5  f6  f7  f8  f9  f10 f11 f12 f13 f14 f15
                            f16 f17 f18 f19 f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 f30 fzero ];
@endif

@if defined(NT)
# integer registers - Windows NT
# names according to Alpha Architecture Reference, II-C
attach variables [ rega regb regc ] [ v0  t0  t1  t2  t3  t4  t5  t6  t7  s0  s1  s2  s3  s4  s5  fp
                                      a0  a1  a2  a3  a4  a5  t8  t9  t10 t11 ra  t12 at  gp  sp  zero ];
attach variables [ fa ]   [ f0  f1  f2  f3  f4  f5  f6  f7  f8  f9  f10 f11 f12 f13 f14 f15
                            f16 f17 f18 f19 f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 f30 fzero ];
@endif

# Paltemp registers
attach variables [ tmpidx ] [ PalTemp0  PalTemp1  PalTemp2  PalTemp3  PalTemp4  PalTemp5  PalTemp6  PalTemp7
                              PalTemp8  PalTemp9  PalTemp10 PalTemp11 palTemp12 PalTemp13 PalTemp14 PalTemp15
                              PalTemp16 PalTemp17 palTemp18 PalTemp19 PalTemp20 PalTemp21 PalTemp22 PalTemp23
                              PalTemp24 PalTemp25 PalTemp26 PalTemp27 PalTemp28 PalTemp29 palTemp30 PalTemp31 ];

@if defined(21064)
# 21064 Ibox registers
attach variables [ ibox ] [ TB_TAG ITB_PTE ICCSR   ITB_PTE_TEMP EXC_ADDR SL_RCV ITBZAP  ITBASM
                            ITBIS  PS      EXC_SUM PAL_BASE     HIRR     SIRR   ASTRR   Ibox15
			    HIER   SIER    ASTER   SL_CLR       Ibox20   Ibox21 SL_XMIT Ibox23
			    Ibox24 Ibox25  Ibox26  Ibox27       Ibox28   Ibox29 Ibox30  Ibox31 ];
# 21064 Abox registers
attach variables [ abox ] [ TB_CTL Abox1    WDTB_PTE DTB_PTE_TEMP  MM_CSR  VA        DTBZAP   DTBASM
                            DTBIS  BIU_ADDR BIU_STAT Abox11
@if defined(21064A)
			                                           C_STAT
@else
                                                                   DC_STAT
@endif
                                                                           FILL_ADDR ABOX_CTL ALT_MODE
                            CC     CC_CTL   BIU_CTL  FILL_SYNDROME BC_TAG  FLUSH_IC  Abox22   FLUSH_IC_ASM
			    Abox24 Abox25   Abox26   Abox27        Abox28  Abox29    Abox30   Abox31 ];
@endif

@if defined(21164)
attach variables [ ldst ] [   _    l    v    lv    q    lq    vq    lvq
                              w   wl   wv   wlv   wq   wlq   wvq   wlvq
			      a   al   av   alv   aq   alq   avq   alvq
			     aw  awl  awv  awlv  awq  awlq  awvq  awlvq
			      p   pl   vp   plv   pq   plq   vpq   plvq
			     pw  pwl  pwv  pwlv  pwq  pwlq  pwvq  pwlvq
			     pa  pal  pav  palv  paq  palq  pavq  palvq
			    paw pawl pawv pawlv pawq pawlq pawvq pawlvq ];
@endif

#--------------------------------------------------------------------------
# Tables

# registers - left-hand-side (assignment)
Ra_lhs: rega is rega { tmp = rega; export tmp; }
Rc_lhs: regc is regc { tmp = regc; export tmp; }

Ra: rega is rega { tmp = rega; export tmp; }
Rb: regb is regb { tmp = regb; export tmp; }
Fa: rega is rega { tmp = rega; export tmp; }
@if defined(21064)
Ix: ibox is ibox { tmp:8 = ibox; export tmp; }
Ax: abox is abox { tmp:8 = abox; export tmp; }
Temp: tmpidx is tmpidx { tmp = tmpidx; export tmp; }
hwaddr: hwdisp(Rb) is hwdisp & Rb & qw=0 { d:2 = hwdisp & 0xffe; ptr = Rb + sext(d); export *[ram]:8 ptr; }
hwaddr: hwdisp(Rb) is hwdisp & Rb & qw=1 { d:2 = hwdisp & 0xffc; ptr = Rb + sext(d); export *[ram]:8 ptr; }
hwmode: ".l/vir"         is phy=0 & alt=0 & rwc=0 & qw=0 { export 0:8; }
hwmode: ".q/vir"         is phy=0 & alt=0 & rwc=0 & qw=1 { export 0:8; }
hwmode: ".l/vir/rwc"     is phy=0 & alt=0 & rwc=1 & qw=0 { export 0:8; }
hwmode: ".q/vir/rwc"     is phy=0 & alt=0 & rwc=1 & qw=1 { export 0:8; }
hwmode: ".l/vir/alt"     is phy=0 & alt=1 & rwc=0 & qw=0 { export 0:8; }
hwmode: ".q/vir/alt"     is phy=0 & alt=1 & rwc=0 & qw=1 { export 0:8; }
hwmode: ".l/vir/alt/rwc" is phy=0 & alt=1 & rwc=1 & qw=0 { export 0:8; }
hwmode: ".q/vir/alt/rwc" is phy=0 & alt=1 & rwc=1 & qw=1 { export 0:8; }
hwmode: ".l/phy"         is phy=1 & alt=0 & rwc=0 & qw=0 { export 0:8; }
hwmode: ".q/phy"         is phy=1 & alt=0 & rwc=0 & qw=1 { export 0:8; }
hwmode: ".l/phy/rwc"     is phy=1 & alt=0 & rwc=1 & qw=0 { export 0:8; }
hwmode: ".q/phy/rwc"     is phy=1 & alt=0 & rwc=1 & qw=1 { export 0:8; }
hwmode: ".l/phy/alt"     is phy=1 & alt=1 & rwc=0 & qw=0 { export 0:8; }
hwmode: ".q/phy/alt"     is phy=1 & alt=1 & rwc=0 & qw=1 { export 0:8; }
hwmode: ".l/phy/alt/rwc" is phy=1 & alt=1 & rwc=1 & qw=0 { export 0:8; }
hwmode: ".q/phy/alt/rwc" is phy=1 & alt=1 & rwc=1 & qw=1 { export 0:8; }
@endif
@if defined(VMS)
Fa: FZ is rega=31 & FZ { export  0:8; }
Ra: RZ is rega=31 & RZ { export  0:8; }
Rb: RZ is regb=31 & RZ { export  0:8; }
@else
Ra: zero is rega=31 & zero   { export 0:8; }
Rb: zero is regb=31 & zero   { export 0:8; }
Fa: fzero is rega=31 & fzero { export  0:8; }
@endif

# LDAx

#  LDA Ra, disp(31) -> LDA Ra, disp
disp_regz: mdisp      is mdisp & regb=31 { val:8 = sext(mdisp:2); export *[const]:8 val; }
#  LDA Ra, disp(Rb)
disp_regb: mdisp(Rb)  is mdisp & Rb { ptr:8 = Rb + sext(mdisp:2); export ptr; }
#  LDAH Ra, 32767(Rb)
hdisp_regb: mdisp(Rb) is mdisp & Rb { ptr:8 = Rb + sext(mdisp:2)*65536; export ptr; }

# PC relative displacement
disp_pc: loc is bdisp [ loc = inst_next + (bdisp << 2); ] { export *[ram]:8 loc; }

# jump hint
hint:    loc is jdisp [ loc = inst_next + (jdisp << 2); ] { export *[ram]:8 loc; }

# PAL 1B displacement
paldisp: pdisp(Rb) is pdisp & Rb  { ptr:8 = Rb + sext(pdisp:2); export ptr; }

# arith operand
op: lit is lit & is_lit = 1 { export *[const]:8 lit; }
op: Rb  is Rb  & is_lit = 0 { export Rb; }

# integer condition codes (for branch)

icc: "EQ" is ccode=1 & is_i = 1 & Ra { tmp:1 = (Ra == 0); export tmp; }
icc: "LT" is ccode=2 & is_i = 1 & Ra { tmp:1 = (Ra s< 0); export tmp; }
icc: "LE" is ccode=3 & is_i = 1 & Ra { tmp:1 = (Ra s<= 0); export tmp; }
icc: "NE" is ccode=5 & is_i = 1 & Ra { tmp:1 = (Ra != 0); export tmp; }
icc: "GE" is ccode=6 & is_i = 1 & Ra { tmp:1 = (Ra s>= 0); export tmp; }
icc: "GT" is ccode=7 & is_i = 1 & Ra { tmp:1 = (Ra s> 0); export tmp; }

# float condition codes (for branch)
fcc: "EQ" is ccode=1 & is_i = 0 & Fa { tmp:1 = (Fa f== 0); export tmp; }
fcc: "LT" is ccode=2 & is_i = 0 & Fa { tmp:1 = (Fa f< 0); export tmp; }
fcc: "LE" is ccode=3 & is_i = 0 & Fa { tmp:1 = (Fa f<= 0); export tmp; }
fcc: "NE" is ccode=5 & is_i = 0 & Fa { tmp:1 = (Fa f!= 0); export tmp; }
fcc: "GE" is ccode=6 & is_i = 0 & Fa { tmp:1 = (Fa f>= 0); export tmp; }
fcc: "GT" is ccode=7 & is_i = 0 & Fa { tmp:1 = (Fa f> 0); export tmp; }

#--------------------------------------------------------------------------
# Mnemonics

#=========================================================================
# Memory Integer Load/Store Instructions
#=========================================================================

# load constant (== LDA a, disp(R31))
:LDA  Ra_lhs, disp_regz is opcode=0x08 & Ra_lhs & disp_regz { Ra_lhs = disp_regz; }
# load address
:LDA  Ra_lhs, disp_regb is opcode=0x08 & Ra_lhs & disp_regb { Ra_lhs = disp_regb; }
# load address high
:LDAH Ra_lhs, hdisp_regb is opcode=0x09 & Ra_lhs & hdisp_regb { Ra_lhs = hdisp_regb; }

# load zero-extended byte from memory
:LDBU Ra_lhs, disp_regb is opcode=0x0a & Ra_lhs & disp_regb { Ra_lhs = zext(*:1 disp_regb); }
:LDL  Ra_lhs, disp_regb is opcode=0x28 & Ra_lhs & disp_regb { Ra_lhs = sext(*:4 disp_regb); }
:LDQ  Ra_lhs, disp_regb is opcode=0x29 & Ra_lhs & disp_regb { Ra_lhs = *disp_regb; }
:LDWU Ra_lhs, disp_regb is opcode=0x0c & Ra_lhs & disp_regb { Ra_lhs = zext(*:2 disp_regb); }

# load unaligned memory
:LDQ_U Ra_lhs, disp_regb is opcode=0x0b & Ra_lhs & disp_regb { ptr = disp_regb & ~7; Ra_lhs = *ptr; }

# load memory locked
:LDL_L  Ra_lhs, disp_regb is opcode=0x2a & Ra_lhs & disp_regb { Ra_lhs = sext(*:4 disp_regb); }
:LDQ_L  Ra_lhs, disp_regb is opcode=0x2b & Ra_lhs & disp_regb { Ra_lhs = disp_regb; }

# store to memory conditional
:STL_C  Ra, disp_regb is opcode=0x2e & Ra & disp_regb { *:4 disp_regb = Ra:4; }
:STQ_C  Ra, disp_regb is opcode=0x2f & Ra & disp_regb { *disp_regb = Ra; }

# store to memory
:STB  Ra, disp_regb is opcode=0x0e & Ra & disp_regb { *:1 disp_regb = Ra:1; }
:STL  Ra, disp_regb is opcode=0x2c & Ra & disp_regb { *:4 disp_regb = Ra:4; }
:STQ  Ra, disp_regb is opcode=0x2d & Ra & disp_regb { *disp_regb = Ra; }
:STW  Ra, disp_regb is opcode=0x0d & Ra & disp_regb { *:2 disp_regb = Ra:2; }

# store to unaligned
:STQ_U  Ra, disp_regb is opcode=0x0f & Ra & disp_regb { ptr = disp_regb & ~7; *ptr = Ra; }

#=========================================================================
# Control Instructions
#=========================================================================

# PC-relative branch
:BR           disp_pc is opcode=0x30 & rega=31 & disp_pc {                     goto disp_pc; }
:BR   Ra_lhs, disp_pc is opcode=0x30 & Ra_lhs  & disp_pc { Ra_lhs = inst_next; goto disp_pc; }
:BSR          disp_pc is opcode=0x34 & rega=31 & disp_pc {                     call disp_pc; }
:BSR  Ra_lhs, disp_pc is opcode=0x34 & Ra_lhs  & disp_pc { Ra_lhs = inst_next; call disp_pc; }

# PC-relative branch conditional
:BLBC  Ra, disp_pc is bcode=0x3 & is_i=1 & ccode=0 & Ra & disp_pc { Bexpr(Ra, Ra:1 ^ 1, disp_pc); }
:BLBS  Ra, disp_pc is bcode=0x3 & is_i=1 & ccode=4 & Ra & disp_pc { Bexpr(Ra, Ra:1 & 1, disp_pc); }
:B^icc Ra, disp_pc is bcode=0x3 & is_i=1 & icc     & Ra & disp_pc { if (icc) goto disp_pc; }

# jumps
:JMP           Ra_lhs,(Rb),hint is opcode=0x1a & jop = 0 & Ra_lhs  & Rb & hint    { Ra_lhs = inst_next; goto [Rb]; }
:JSR           Ra_lhs,(Rb),hint is opcode=0x1a & jop = 1 & Ra_lhs  & Rb & hint    { Ra_lhs = inst_next; call [Rb]; }
:RET           (Rb)             is opcode=0x1a & jop = 2 & rega=31 & Rb & jdisp=0 { goto [Rb]; }
:RET           Ra_lhs,(Rb),hint is opcode=0x1a & jop = 2 & Ra_lhs  & Rb & hint    { Ra_lhs = inst_next; goto [Rb]; }
:JSR_COROUTINE Ra_lhs,(Rb),hint is opcode=0x1a & jop = 3 & Ra_lhs  & Rb & hint    { Ra_lhs = inst_next; call [Rb]; }

#=========================================================================
# Integer Arithmetic Instructions
#=========================================================================

# add
:ADDL   Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x00 & Ra & op & Rc_lhs { tmp = Ra:4 + op:4; Rc_lhs = sext(tmp); }
:ADDL^"/V"   Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x40 & Ra & op & Rc_lhs { tmp = Ra:4 + op:4; Rc_lhs = sext(tmp); }
:S4ADDL Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x02 & Ra & op & Rc_lhs { tmp = Ra:4 << 2; tmp = tmp + op:4; Rc_lhs = sext(tmp); }
:S8ADDL Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x12 & Ra & op & Rc_lhs { tmp = Ra:4 << 3; tmp = tmp + op:4; Rc_lhs = sext(tmp); }
:ADDQ   Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x20 & Ra & op & Rc_lhs { Rc_lhs = Ra + op; }
:ADDQ^"/V"   Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x60 & Ra & op & Rc_lhs { Rc_lhs = Ra + op; }
:S4ADDQ Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x22 & Ra & op & Rc_lhs { tmp = Ra << 2; Rc_lhs = tmp + op; }
:S8ADDQ Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x32 & Ra & op & Rc_lhs { tmp = Ra << 3; Rc_lhs = tmp + op; }

# compare
:CMPEQ  Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x2d & Ra & op & Rc_lhs { Rc_lhs = zext(Ra == op); }
:CMPLE  Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x6d & Ra & op & Rc_lhs { Rc_lhs = zext(Ra s<= op); }
:CMPLT  Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x4d & Ra & op & Rc_lhs { Rc_lhs = zext(Ra s< op); }
:CMPULE Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x3d & Ra & op & Rc_lhs { Rc_lhs = zext(Ra <= op); }
:CMPULT Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x1d & Ra & op & Rc_lhs { Rc_lhs = zext(Ra < op); }

# count bits
:CTLZ   Rb, Rc_lhs     is opcode=0x1c & ofunc=0x32 & rega=31 & Rb & Rc_lhs unimpl
:CTPOP  Rb, Rc_lhs     is opcode=0x1c & ofunc=0x30 & rega=31 & Rb & Rc_lhs unimpl
:CTTZ   Rb, Rc_lhs     is opcode=0x1c & ofunc=0x33 & rega=31 & Rb & Rc_lhs unimpl

# multiply
:MULL      Ra, op, Rc_lhs is opcode=0x13 & ofunc=0x00 & Ra & op & Rc_lhs { Rc_lhs = sext(Ra:4 * op:4); }
:MULL^"/V" Ra, op, Rc_lhs is opcode=0x13 & ofunc=0x40 & Ra & op & Rc_lhs { Rc_lhs = sext(Ra:4 * op:4); }
:MULQ      Ra, op, Rc_lhs is opcode=0x13 & ofunc=0x20 & Ra & op & Rc_lhs { Rc_lhs = Ra * op; }
:MULQ^"/V" Ra, op, Rc_lhs is opcode=0x13 & ofunc=0x60 & Ra & op & Rc_lhs { Rc_lhs = Ra * op; }
:UMULH     Ra, op, Rc_lhs is opcode=0x13 & ofunc=0x30 & Ra & op & Rc_lhs { tmp:16 = zext(Ra) * zext(op); tmp = (tmp >> 64); Rc_lhs = tmp:8; }

# subtract
:SUBL   Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x09 & Ra & op & Rc_lhs { tmp = Ra:4 - op:4; Rc_lhs = sext(tmp); }
:SUBL^"/V"   Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x49 & Ra & op & Rc_lhs { tmp = Ra:4 - op:4; Rc_lhs = sext(tmp); }
:S4SUBL Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x0b & Ra & op & Rc_lhs { tmp = Ra:4 << 2; tmp = tmp - op:4; Rc_lhs = sext(tmp); }
:S8SUBL Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x1b & Ra & op & Rc_lhs { tmp = Ra:4 << 3; tmp = tmp - op:4; Rc_lhs = sext(tmp); }
:SUBQ   Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x29 & Ra & op & Rc_lhs { Rc_lhs = Ra - op; }
:SUBQ^"/V"   Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x69 & Ra & op & Rc_lhs { Rc_lhs = Ra - op; }
:S4SUBQ Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x2b & Ra & op & Rc_lhs { tmp = Ra << 2; Rc_lhs = tmp - op; }
:S8SUBQ Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x3b & Ra & op & Rc_lhs { tmp = Ra << 3; Rc_lhs = tmp - op; }

# logical functions
:AND   Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x00 & Ra & op & Rc_lhs    { Rc_lhs = Ra & op; }
:BIC   Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x08 & Ra & op & Rc_lhs    { Rc_lhs = Ra & ~op; }
:CLR           Rc_lhs is opcode=0x11 & ofunc=0x20 & rega=31 & regb=31 & is_lit=0 & Rc_lhs { Rc_lhs = 0; }
:MOV       op, Rc_lhs is opcode=0x11 & ofunc=0x20 & rega=31 & op & Rc_lhs { Rc_lhs = op; }
:MOV       op, Rc_lhs is opcode=0x11 & ofunc=0x20 & rega=regb & op & Rc_lhs { Rc_lhs = op; }
:BIS   Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x20 & Ra & op & Rc_lhs    { Rc_lhs = Ra | op; }
:EQV   Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x48 & Ra & op & Rc_lhs    { Rc_lhs = Ra ^ ~op; }
:NOT       op, Rc_lhs is opcode=0x11 & ofunc=0x28 & rega=31 & op & Rc_lhs { Rc_lhs = ~op; }
:ORNOT Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x28 & Ra & op & Rc_lhs    { Rc_lhs = Ra | ~op; }
:XOR   Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x40 & Ra & op & Rc_lhs    { Rc_lhs = Ra ^ op; }

macro cmov(condition,reg,val) {
  if (!(condition)) goto <skip>;
  reg = val;
<skip>
}

# conditional move
:CMOVEQ  Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x24 & Ra & op & Rc_lhs  { cmov(Ra == 0,Rc_lhs,op); }
:CMOVGE  Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x46 & Ra & op & Rc_lhs  { cmov(Ra s>= 0,Rc_lhs,op); }
:CMOVGT  Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x66 & Ra & op & Rc_lhs  { cmov(Ra s> 0,Rc_lhs,op); }
:CMOVLBC Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x16 & Ra & op & Rc_lhs  { cmov((Ra:1 ^ 0x1),Rc_lhs,op); }
:CMOVLBS Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x14 & Ra & op & Rc_lhs  { cmov((Ra:1 & 0x1),Rc_lhs,op); }
:CMOVLE  Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x64 & Ra & op & Rc_lhs  { cmov(Ra s<= 0,Rc_lhs,op); }
:CMOVLT  Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x44 & Ra & op & Rc_lhs  { cmov(Ra s< 0,Rc_lhs,op); }
:CMOVNE  Ra, op, Rc_lhs is opcode=0x11 & ofunc=0x26 & Ra & op & Rc_lhs  { cmov(Ra != 0,Rc_lhs,op); }

# shift logical
:SLL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x39 & Ra & op & Rc_lhs { Rc_lhs = Ra << op[0,5]; }
:SRL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x34 & Ra & op & Rc_lhs { Rc_lhs = Ra >> op[0,5]; }

# shift arithmetic
:SRA Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x3c & Ra & op & Rc_lhs { Rc_lhs = Ra s>> op[0,5]; }

#=========================================================================
# Byte Manipulation Instructions
#=========================================================================

# compare byte
:CMPBGE Ra, op, Rc_lhs is opcode=0x10 & ofunc=0x0f & Ra & op & Rc_lhs unimpl

# extract byte
:EXTBL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x06 & Ra & op & Rc_lhs unimpl
:EXTWL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x16 & Ra & op & Rc_lhs unimpl
:EXTLL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x26 & Ra & op & Rc_lhs unimpl
:EXTQL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x36 & Ra & op & Rc_lhs unimpl
:EXTWH Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x5a & Ra & op & Rc_lhs unimpl
:EXTLH Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x6a & Ra & op & Rc_lhs unimpl
:EXTQH Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x7a & Ra & op & Rc_lhs unimpl

# byte insert
:INSBL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x0b & Ra & op & Rc_lhs unimpl
:INSWL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x1b & Ra & op & Rc_lhs unimpl
:INSLL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x2b & Ra & op & Rc_lhs unimpl
:INSQL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x3b & Ra & op & Rc_lhs unimpl
:INSWH Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x57 & Ra & op & Rc_lhs unimpl
:INSLH Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x67 & Ra & op & Rc_lhs unimpl
:INSQH Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x77 & Ra & op & Rc_lhs unimpl

# byte mask
:MSKBL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x02 & Ra & op & Rc_lhs unimpl
:MSKWL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x12 & Ra & op & Rc_lhs unimpl
:MSKLL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x22 & Ra & op & Rc_lhs unimpl
:MSKQL Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x32 & Ra & op & Rc_lhs unimpl
:MSKWH Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x52 & Ra & op & Rc_lhs unimpl
:MSKLH Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x62 & Ra & op & Rc_lhs unimpl
:MSKQH Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x72 & Ra & op & Rc_lhs unimpl

# sign extend
:SEXTB op, Rc_lhs is opcode=0x1c & ofunc=0x00 & rega=31 & op & Rc_lhs { Rc_lhs = sext(op:1); }
:SEXTW op, Rc_lhs is opcode=0x1c & ofunc=0x01 & rega=31 & op & Rc_lhs { Rc_lhs = sext(op:2); }

# set complete bytes to zero
macro zap(src, dest, bits) {
  dest = src;
  if ((bits & 0x01) == 0) goto <nozap0>;
  dest[0,8] = 0;
<nozap0>
  if ((bits & 0x02) == 0) goto <nozap1>;
  dest[8,8] = 0;
<nozap1>
  if ((bits & 0x04) == 0) goto <nozap2>;
  dest[16,8] = 0;
<nozap2>
  if ((bits & 0x08) == 0) goto <nozap3>;
  dest[24,8] = 0;
<nozap3>
  if ((bits & 0x01) == 0) goto <nozap4>;
  dest[32,8] = 0;
<nozap4>
  if ((bits & 0x02) == 0) goto <nozap5>;
  dest[40,8] = 0;
<nozap5>
  if ((bits & 0x04) == 0) goto <nozap6>;
  dest[48,8] = 0;
<nozap6>
  if ((bits & 0x08) == 0) goto <nozap7>;
  dest[56,8] = 0;
<nozap7>
}

# zero bytes
:ZAP    Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x30 & Ra & op & Rc_lhs { zap(Ra, Rc_lhs, op); }
:ZAPNOT Ra, op, Rc_lhs is opcode=0x12 & ofunc=0x31 & Ra & op & Rc_lhs { zap(Ra, Rc_lhs, op^0xff); }

#=========================================================================
# Floating-Point Instructions
#=========================================================================

# Memory Format Floating-Point Instructions
:LDF Fa, disp_regb is opcode=0x20 & Fa & disp_regb { Fa = disp_regb; }
:LDG Fa, disp_regb is opcode=0x21 & Fa & disp_regb { Fa = disp_regb; }
:LDS Fa, disp_regb is opcode=0x22 & Fa & disp_regb { Fa = disp_regb; }
:LDT Fa, disp_regb is opcode=0x23 & Fa & disp_regb { Fa = disp_regb; }

:STF Fa, disp_regb is opcode=0x24 & Fa & disp_regb { *:4 disp_regb = Fa:4; }
:STG Fa, disp_regb is opcode=0x25 & Fa & disp_regb { *:8 disp_regb = Fa; }
:STS Fa, disp_regb is opcode=0x26 & Fa & disp_regb { *:8 disp_regb = Fa; }
:STT Fa, disp_regb is opcode=0x27 & Fa & disp_regb { *:8 disp_regb = Fa; }

# Branch Format Floating-Point Instructions
:FB^fcc Fa, disp_pc is bcode=0x3 & fcc & Fa & disp_pc { if (fcc) goto disp_pc; }

#=========================================================================
# Miscellaneous Instructions
#=========================================================================

define pcodeop nop;

:AMASK op, Rc_lhs is opcode=0x11 & ofunc=0x61 & op & Rc_lhs { Rc_lhs = op; }

# PAL
:HALT           is opcode=0x00 & pcode=0    { nop(); }
:DRAINA         is opcode=0x00 & pcode=2    { nop(); }
:IMB            is opcode=0x00 & pcode=0x86 { nop(); }
# 4.1.5 Exceptions Address Register (EXC_ADDR)
# CALL_PAL exceptions load the EXC_ADDR with the PC of the instruction following the CALL_PAL
@if defined(21064)
:CALL_PAL pcode is opcode=0x00 & pcode      { reg:8 = 0x320; ptr:8 = inst_next; *[register]reg = ptr; }
@endif
@if defined(21164)
:CALL_PAL pcode is opcode=0x00 & pcode      { reg:8 = 0x358; ptr:8 = inst_next; *[register]reg = ptr; }
@endif
@if defined(21264)
:CALL_PAL pcode is opcode=0x00 & pcode      { nop(); }
@endif

# 21064: see EC-Q9ZUC-TE pg 95ff
@if defined(21064)
# -> Setting the PAL, ABX, and IBX fields to zero generates a NOP.
:NOP                                       is opcode=0x19 &                                           paltmp=0 & abx=0 & ibx=0 { nop(); }
:NOP                                       is opcode=0x1d &                                           paltmp=0 & abx=0 & ibx=0 { nop(); }
# move from internal processor register
:HW_MFPR^"/i"  Ra_lhs, Ix              is opcode=0x19 & Ra_lhs &      Ix &        rega=regb & paltmp=0 & abx=0 & ibx=1 { Ra_lhs = Ix; }
:HW_MFPR^"/a"  Ra_lhs, Ax              is opcode=0x19 & Ra_lhs & Ax &             rega=regb & paltmp=0 & abx=1 & ibx=0 { Ra_lhs = Ax; }
:HW_MFPR^"/p"  Ra_lhs, Temp            is opcode=0x19 & Ra_lhs &           Temp & rega=regb & paltmp=1 & abx=0 & ibx=0 { Ra_lhs = Temp; }
# move to internal processor register
:HW_MTPR^"/i"  Ra, Ix                  is opcode=0x1d & Ra     &      Ix &        rega=regb & paltmp=0 & abx=0 & ibx=1 {          Ix = Ra; }
:HW_MTPR^"/a"  Ra, Ax                  is opcode=0x1d & Ra     & Ax &             rega=regb & paltmp=0 & abx=1 & ibx=0 { Ax = Ra; }
:HW_MTPR^"/p"  Ra, Temp                is opcode=0x1d & Ra     &           Temp & rega=regb & paltmp=1 & abx=0 & ibx=0 {                   Temp = Ra; }
# move to multiple internal processor registers
:HW_MTPR^"/ai"  Ra, Ax^"+"^Ix          is opcode=0x1d & Ra     & Ax & Ix &        rega=regb & paltmp=0 & abx=1 & ibx=1 { Ax = Ra; Ix = Ra; }
:HW_MTPR^"/ip"  Ra, Ix^"+"^Temp        is opcode=0x1d & Ra     &      Ix & Temp & rega=regb & paltmp=1 & abx=0 & ibx=1 {          Ix = Ra; Temp = Ra; }
:HW_MTPR^"/ap"  Ra, Ax^"+"^Temp        is opcode=0x1d & Ra     & Ax &      Temp & rega=regb & paltmp=1 & abx=1 & ibx=0 { Ax = Ra;          Temp = Ra; }
:HW_MTPR^"/aip" Ra, Ax^"+"^Ix^"+"^Temp is opcode=0x1d & Ra     & Ax & Ix & Temp & rega=regb & paltmp=1 & abx=1 & ibx=1 { Ax = Ra; Ix = Ra; Temp = Ra; }
:HW_LD^hwmode rega,hwaddr is opcode=0x1b & hwmode & rega & hwaddr { rega = hwaddr; }
:HW_ST^hwmode rega,hwaddr is opcode=0x1f & hwmode & rega & hwaddr { hwaddr = rega; }
# offset 0x320 ==  EXC_ADDR
:HW_REI pcode      is opcode=0x1e & pcode { reg:8 = 0x320; ptr:8 = *[register]reg; goto [ptr]; }
@else
:HW_MTPR Ra         is opcode=0x1d & Ra { nop(); }
:HW_MFPR pcode      is opcode=0x19 & pcode { nop(); }
:HW_REI pcode       is opcode=0x1e & pcode { nop(); }
# 21164 :HW_REI pcode      is opcode=0x1e & pcode { reg:8 = 0x358; ptr:8 = *[register]reg; goto [ptr]; }
:HW_LD rega,paldisp is opcode=0x1b & rega & paldisp { nop(); }
:HW_ST pcode        is opcode=0x1f & pcode { nop(); }
@endif

# cache hints
:ECB (Rb) is opcode=0x18 & mfunc=0xe800 & Rb { nop(); }
:EXCB     is opcode=0x18 & mfunc=0x0400 { nop();  }
:FETCH    is opcode=0x18 & mfunc=0x8000 { nop(); }
:FETCH_M  is opcode=0x18 & mfunc=0xa000 { nop(); }

# processor family
@if defined(21064)
:IMPLVER Rc_lhs is opcode=0x11 & ofunc=0x6c & rega=31 & Rc_lhs { Rc_lhs = 0; }
@endif
@if defined(21164)
:IMPLVER Rc_lhs is opcode=0x11 & ofunc=0x6c & rega=31 & Rc_lhs { Rc_lhs = 1; }
@endif
@if defined(21264)
:IMPLVER Rc_lhs is opcode=0x11 & ofunc=0x6c & rega=31 & Rc_lhs { Rc_lhs = 2; }
@endif
@if defined(21364)
:IMPLVER Rc_lhs is opcode=0x11 & ofunc=0x6c & rega=31 & Rc_lhs { Rc_lhs = 3; }
@endif
@if defined(21464)
:IMPLVER Rc_lhs is opcode=0x11 & ofunc=0x6c & rega=31 & Rc_lhs { Rc_lhs = 4; }
@endif

# memory barrier
define pcodeop barrier;
:MB is opcode=0x18 & mfunc=0x4000 { barrier(); }

# get cylce counter
define pcodeop cycle_counter;
:RPCC Ra is opcode=0x18 & mfunc=0xc000 & Ra { Ra = cycle_counter(); }

# trap barrier
:TRAPB is opcode=0x18 & mfunc=0x0000 { nop(); }

# write hint
:WH64 (Rb)   is opcode=0x18 & mfunc=0xf800 & Rb { nop(); }
:WH64EN (Rb) is opcode=0x18 & mfunc=0xfc00 & Rb { nop(); }

# write memory barrier
:WMB is opcode=0x18 & mfunc=0x4400 { nop(); }

# VAX compatibility instructions
:RC Ra is opcode=0x18 & mfunc=0xe000 & Ra { nop(); }
:RS Ra is opcode=0x18 & mfunc=0xf000 & Ra { nop(); }

# Opcodes reserved to Digital
@if defined(21064)
:OPC01 is opcode=0x01 unimpl
:OPC02 is opcode=0x02 unimpl
:OPC03 is opcode=0x03 unimpl
:OPC04 is opcode=0x04 unimpl
:OPC05 is opcode=0x05 unimpl
:OPC06 is opcode=0x06 unimpl
:OPC07 is opcode=0x07 unimpl
:OPC14 is opcode=0x14 unimpl
@endif
