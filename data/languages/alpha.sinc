# sleigh specification file for DEC Alpha
#
# Copyright (c) 2024 by Klaus KÃ¤mpf <kkaempf@gmail.com>
#
# Licensed under the Apache 2.0 license
#


#--------------------------------------------------------------------------
# Spaces

define endian=little;
define alignment=1;
define space ram      type=ram_space      size=8  wordsize=1 default;
define space register type=register_space size=8;


#--------------------------------------------------------------------------
# Registers

# integer registers
define register offset=0x00 size=8 [ R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10 R11 R12 R13 R14 R15
                                     R16 R17 R18 R19 R20 R21 R22 R23 R24 AI  RA  PV  R28 FP  SP  RZ ];

# floating point registers
define register offset=0x100 size=8 [ F0  F1  F2  F3  F4  F5  F6  F7  F8  F9  F10 F11 F12 F13 F14 F15
                                      F16 F17 F18 F19 F20 F21 F22 F23 F24 F25 F26 F27 F28 F29 F30 FZ ];

# flags: negative, overflow, zero
define register offset=0x200 size=1 [ N_F V_F Z_F ];

# program counter
define register offset=0x208 size=8 [ PC ];

# variables
define register offset=0x210 size=8 [ loc ];

#--------------------------------------------------------------------------
# Macros

macro iflags(result) {
  N_F = result s< 0;
  Z_F = result == 0;
}

# FIXME
macro fflags(result) {
  N_F = result s< 0;
  Z_F = result == 0;
}

macro Bexpr(reg,expr,target) {
  local tmp:1 = expr;
  if (!(tmp)) goto <cont>;
  reg = inst_next;
  goto [target];
<cont>
}

#--------------------------------------------------------------------------
# Tokens

# Instruction format
define token inst (32)
        opcode = (26, 31)
        bcode  = (30, 31) # branch code
        is_f   = (29, 29) # float flag for branch
        ccode  = (26, 28) # condition code
        pal    = ( 0, 25) dec # Palcode
        ra     = (21, 25) # Register a
        fa     = (21, 25) # Floating-Point Register a
        bdisp  = ( 0, 20) signed # branch displacement
        rb     = (16, 20) # Register b
        mfunc  = ( 0, 15) # memory format with function code
        mdisp  = ( 0, 15) signed dec # memory displacement
        jop    = (14, 15) # jump opcode
        jdisp  = ( 0, 13) signed # jump displacement
        sbz    = (13, 15) # should be zero
        lit    = (13, 20) signed dec # literal
        is_lit = (12, 12) # bit 12: 0->SBZ, 1->LIT
        ofunc  = ( 5, 11) # operate function
        rc     = ( 0,  4) # Register c
;

#--------------------------------------------------------------------------
# Variables

attach variables [ ra ] [ R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10 R11 R12 R13 R14 R15
                          R16 R17 R18 R19 R20 R21 R22 R23 R24 AI  RA  PV  R28 FP  SP  RZ ];
attach variables [ rb ] [ R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10 R11 R12 R13 R14 R15
                          R16 R17 R18 R19 R20 R21 R22 R23 R24 AI  RA  PV  R28 FP  SP  RZ ];
attach variables [ rc ] [ R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10 R11 R12 R13 R14 R15
                          R16 R17 R18 R19 R20 R21 R22 R23 R24 AI  RA  PV  R28 FP  SP  RZ ];
attach variables [ fa ] [ F0  F1  F2  F3  F4  F5  F6  F7  F8  F9  F10 F11 F12 F13 F14 F15
                          F16 F17 F18 F19 F20 F21 F22 F23 F24 F25 F26 F27 F28 F29 F30 FZ ];

#--------------------------------------------------------------------------
# Tables

# LDAx

#  LDA Ra, disp(Rb)
disp_regb: mdisp(rb) is mdisp & rb { ptr:8 = rb + sext(mdisp:2); export ptr; }
#  LDAH Ra, 32767(Rb)
hdisp_regb: mdisp(rb) is mdisp & rb { ptr:8 = rb + sext(mdisp:2)*65536; export ptr; }

# PC relative displacement
disp_pc: loc is bdisp [ loc = inst_start + 4 + (bdisp << 2); ] { export *[ram]:8 loc; }

# jump hint
hint: jdisp is jdisp { ptr:8 = sext(jdisp:2)*4; export *[ram]:8 ptr; }

# arith operand
op: lit is lit & is_lit = 1 { export *[const]:8 lit; }
op: rb  is rb  & is_lit = 0 { export rb; }

# integer condition codes (for branch)

icc: "EQ" is ccode=1 & is_f = 0 & ra { tmp:1 = (ra == 0); export tmp; }
icc: "LT" is ccode=2 & is_f = 0 & ra { tmp:1 = (ra s< 0); export tmp; }
icc: "LE" is ccode=3 & is_f = 0 & ra { tmp:1 = !(ra s> 0); export tmp; }
icc: "NE" is ccode=5 & is_f = 0 & ra { tmp:1 = (ra != 0); export tmp; }
icc: "GE" is ccode=6 & is_f = 0 & ra { tmp:1 = !(ra s< 0); export tmp; }
icc: "GT" is ccode=7 & is_f = 0 & ra { tmp:1 = (ra s> 0); export tmp; }

# float condition codes (for branch)
# fixme
fcc: "EQ" is ccode=1 & is_f = 1 & fa { tmp:1 = (fa == 0); export tmp; }
fcc: "LT" is ccode=2 & is_f = 1 & fa { tmp:1 = (fa s< 0); export tmp; }
fcc: "LE" is ccode=3 & is_f = 1 & fa { tmp:1 = !(fa s> 0); export tmp; }
fcc: "NE" is ccode=5 & is_f = 1 & fa { tmp:1 = (fa != 0); export tmp; }
fcc: "GE" is ccode=6 & is_f = 1 & fa { tmp:1 = !(fa s< 0); export tmp; }
fcc: "GT" is ccode=7 & is_f = 1 & fa { tmp:1 = (fa s> 0); export tmp; }

#--------------------------------------------------------------------------
# Mnemonics

#=========================================================================
# Memory Integer Load/Store Instructions
#=========================================================================

# load address
:LDA  ra, disp_regb is opcode=0x08 & ra & disp_regb { ra = disp_regb; }
# load address high
:LDAH ra, hdisp_regb is opcode=0x09 & ra & hdisp_regb { ra = hdisp_regb; }

# load zero-extended byte from memory
:LDBU ra, disp_regb is opcode=0x0a & ra & disp_regb { ra = zext(*:1 disp_regb); }
:LDL  ra, disp_regb is opcode=0x28 & ra & disp_regb { ra = sext(*:4 disp_regb); }
:LDQ  ra, disp_regb is opcode=0x29 & ra & disp_regb { ra = *disp_regb; }
:LDWU ra, disp_regb is opcode=0x0c & ra & disp_regb { ra = zext(*:2 disp_regb); }

# load unaligned memory
:LDQ_U ra, disp_regb is opcode=0x0b & ra & disp_regb { ptr = disp_regb & ~7; ra = *ptr; }

# load memory locked
:LDL_L  ra, disp_regb is opcode=0x2a & ra & disp_regb { ra = sext(*:4 disp_regb); }
:LDQ_L  ra, disp_regb is opcode=0x2b & ra & disp_regb { ra = disp_regb; }

# store to memory conditional
:STL_C  ra, disp_regb is opcode=0x2e & ra & disp_regb { *:4 disp_regb = ra:4; }
:STQ_C  ra, disp_regb is opcode=0x2f & ra & disp_regb { *disp_regb = ra; }

# store to memory
:STB  ra, disp_regb is opcode=0x0e & ra & disp_regb { *:1 disp_regb = ra:1; }
:STL  ra, disp_regb is opcode=0x2c & ra & disp_regb { *:4 disp_regb = ra:4; }
:STQ  ra, disp_regb is opcode=0x2d & ra & disp_regb { *disp_regb = ra; }
:STW  ra, disp_regb is opcode=0x0d & ra & disp_regb { *:2 disp_regb = ra:2; }

# store to unaligned
:STQ_U  ra, disp_regb is opcode=0x0f & ra & disp_regb { ptr = disp_regb & ~7; *ptr = ra; }

#=========================================================================
# Control Instructions
#=========================================================================

# PC-relative branch
:BR   ra, disp_pc is opcode=0x30 & ra & disp_pc { ra = inst_next; goto [disp_pc]; }
:BSR  ra, disp_pc is opcode=0x34 & ra & disp_pc { ra = inst_next; call [disp_pc]; }

# PC-relative branch conditional
:BLBC  ra, disp_pc is bcode=0x3 & is_f=1 & ccode=0 & ra & disp_pc { Bexpr(ra, ra:1 ^ 1, disp_pc); }
:BLBS  ra, disp_pc is bcode=0x3 & is_f=1 & ccode=4 & ra & disp_pc { Bexpr(ra, ra:1 & 1, disp_pc); }
:B^icc ra, disp_pc is bcode=0x3 & is_f=0 & icc & ra & disp_pc { if (icc) goto disp_pc; }

# jumps
:JMP ra,(rb),hint is opcode=0x1a & jop = 0 & ra & rb & hint { ra = inst_next; goto [rb]; }
:JSR ra,(rb),hint is opcode=0x1a & jop = 1 & ra & rb & hint { ra = inst_next; call [rb]; }
:RET ra,(rb),hint is opcode=0x1a & jop = 2 & ra & rb & hint { ra = inst_next; goto [rb]; }
:JSR_COROUTINE ra,(rb),hint is opcode=0x1a & jop = 3 & ra & rb & hint { ra = inst_next; call [rb]; }

#=========================================================================
# Integer Arithmetic Instructions
#=========================================================================

# add
:ADDL   ra, op, rc is opcode=0x10 & ofunc=0x00 & ra & op & rc { tmp = ra:4 + op:4; rc = sext(tmp); }
:ADDL^"/V"   ra, op, rc is opcode=0x10 & ofunc=0x40 & ra & op & rc { tmp = ra:4 + op:4; rc = sext(tmp); }
:S4ADDL ra, op, rc is opcode=0x10 & ofunc=0x02 & ra & op & rc { tmp = ra:4 << 2; tmp = tmp + op:4; rc = sext(tmp); }
:S8ADDL ra, op, rc is opcode=0x10 & ofunc=0x12 & ra & op & rc { tmp = ra:4 << 3; tmp = tmp + op:4; rc = sext(tmp); }
:ADDQ   ra, op, rc is opcode=0x10 & ofunc=0x20 & ra & op & rc { rc = ra + op; }
:ADDQ^"/V"   ra, op, rc is opcode=0x10 & ofunc=0x60 & ra & op & rc { rc = ra + op; }
:S4ADDQ ra, op, rc is opcode=0x10 & ofunc=0x22 & ra & op & rc { tmp = ra << 2; rc = tmp + op; }
:S8ADDQ ra, op, rc is opcode=0x10 & ofunc=0x32 & ra & op & rc { tmp = ra << 3; rc = tmp + op; }

# compare
:CMPEQ  ra, op, rc is opcode=0x10 & ofunc=0x2d & ra & op & rc { rc = zext(ra == op); }
:CMPLE  ra, op, rc is opcode=0x10 & ofunc=0x6d & ra & op & rc { rc = zext(ra == op) + zext(ra s< op); }
:CMPLT  ra, op, rc is opcode=0x10 & ofunc=0x4d & ra & op & rc { rc = zext(ra s< op); }
:CMPULE ra, op, rc is opcode=0x10 & ofunc=0x3d & ra & op & rc { rc = zext(ra == op) + zext(ra < op); }
:CMPULT ra, op, rc is opcode=0x10 & ofunc=0x1d & ra & op & rc { rc = zext(ra < op); }

# count bits
:CTLZ   rb, rc     is opcode=0x1c & ofunc=0x32 & ra=31 & rb & rc unimpl
:CTPOP  rb, rc     is opcode=0x1c & ofunc=0x30 & ra=31 & rb & rc unimpl
:CTTZ   rb, rc     is opcode=0x1c & ofunc=0x33 & ra=31 & rb & rc unimpl

# multiply
:MULL      ra, op, rc is opcode=0x13 & ofunc=0x00 & ra & op & rc { rc = sext(ra:4 * op:4); }
:MULL^"/V" ra, op, rc is opcode=0x13 & ofunc=0x40 & ra & op & rc { rc = sext(ra:4 * op:4); }
:MULQ      ra, op, rc is opcode=0x13 & ofunc=0x20 & ra & op & rc { rc = ra * op; }
:MULQ^"/V" ra, op, rc is opcode=0x13 & ofunc=0x60 & ra & op & rc { rc = ra * op; }
:UMULH     ra, op, rc is opcode=0x13 & ofunc=0x30 & ra & op & rc { tmp:16 = zext(ra) * zext(op); tmp = (tmp >> 64); rc = tmp:8; }

# subtract
:SUBL   ra, op, rc is opcode=0x10 & ofunc=0x09 & ra & op & rc { tmp = ra:4 - op:4; rc = sext(tmp); }
:SUBL^"/V"   ra, op, rc is opcode=0x10 & ofunc=0x49 & ra & op & rc { tmp = ra:4 - op:4; rc = sext(tmp); }
:S4SUBL ra, op, rc is opcode=0x10 & ofunc=0x0b & ra & op & rc { tmp = ra:4 << 2; tmp = tmp - op:4; rc = sext(tmp); }
:S8SUBL ra, op, rc is opcode=0x10 & ofunc=0x1b & ra & op & rc { tmp = ra:4 << 3; tmp = tmp - op:4; rc = sext(tmp); }
:SUBQ   ra, op, rc is opcode=0x10 & ofunc=0x29 & ra & op & rc { rc = ra - op; }
:SUBQ^"/V"   ra, op, rc is opcode=0x10 & ofunc=0x69 & ra & op & rc { rc = ra - op; }
:S4SUBQ ra, op, rc is opcode=0x10 & ofunc=0x2b & ra & op & rc { tmp = ra << 2; rc = tmp - op; }
:S8SUBQ ra, op, rc is opcode=0x10 & ofunc=0x3b & ra & op & rc { tmp = ra << 3; rc = tmp - op; }

# logical functions
:AND   ra, op, rc is opcode=0x11 & ofunc=0x00 & ra & op & rc    { rc = ra & op; }
:BIC   ra, op, rc is opcode=0x11 & ofunc=0x08 & ra & op & rc    { rc = ra & ~op; }
:CLR           rc is opcode=0x11 & ofunc=0x20 & ra=31 & rb=31 & is_lit=0 & rc { rc = 0; }
:MOV       op, rc is opcode=0x11 & ofunc=0x20 & ra=31 & op & rc { rc = op; }
:BIS   ra, op, rc is opcode=0x11 & ofunc=0x20 & ra & op & rc    { rc = ra | op; }
:EQV   ra, op, rc is opcode=0x11 & ofunc=0x48 & ra & op & rc    { rc = ra ^ ~op; }
:NOT       op, rc is opcode=0x11 & ofunc=0x28 & ra=31 & op & rc { rc = ~op; }
:ORNOT ra, op, rc is opcode=0x11 & ofunc=0x28 & ra & op & rc    { rc = ra | ~op; }
:XOR   ra, op, rc is opcode=0x11 & ofunc=0x40 & ra & op & rc    { rc = ra ^ op; }

macro cmov(condition,reg,val) {
  if (!(condition)) goto <skip>;
  reg = val;
<skip>
}

# conditional move
:CMOVEQ  ra, op, rc is opcode=0x11 & ofunc=0x24 & ra & op & rc  { iflags(ra); cmov(Z_F,rc,op); }
:CMOVGE  ra, op, rc is opcode=0x11 & ofunc=0x46 & ra & op & rc  { iflags(ra); cmov(!N_F,rc,op); }
:CMOVGT  ra, op, rc is opcode=0x11 & ofunc=0x66 & ra & op & rc  { iflags(ra); cmov(!(Z_F || N_F),rc,op); }
:CMOVLBC ra, op, rc is opcode=0x11 & ofunc=0x16 & ra & op & rc  { iflags(ra); cmov((ra:1 ^ 0x1),rc,op); }
:CMOVLBS ra, op, rc is opcode=0x11 & ofunc=0x14 & ra & op & rc  { iflags(ra); cmov((ra:1 & 0x1),rc,op); }
:CMOVLE  ra, op, rc is opcode=0x11 & ofunc=0x64 & ra & op & rc  { iflags(ra); cmov(Z_F || N_F,rc,op); }
:CMOVLT  ra, op, rc is opcode=0x11 & ofunc=0x44 & ra & op & rc  { iflags(ra); cmov(N_F,rc,op); }
:CMOVNE  ra, op, rc is opcode=0x11 & ofunc=0x26 & ra & op & rc  { iflags(ra); cmov(!Z_F,rc,op); }

# shift logical
:SLL ra, op, rc is opcode=0x12 & ofunc=0x39 & ra & op & rc { rc = ra << op[0,5]; }
:SRL ra, op, rc is opcode=0x12 & ofunc=0x34 & ra & op & rc { rc = ra >> op[0,5]; } #FIXME

# shift arithmetic
:SRA ra, op, rc is opcode=0x12 & ofunc=0x3c & ra & op & rc { rc = ra >> op[0,5]; }

#=========================================================================
# Byte Manipulation Instructions
#=========================================================================

# compare byte
:CMPBGE ra, op, rc is opcode=0x10 & ofunc=0x0f & ra & op & rc unimpl

# extract byte
:EXTBL ra, op, rc is opcode=0x12 & ofunc=0x06 & ra & op & rc unimpl
:EXTWL ra, op, rc is opcode=0x12 & ofunc=0x16 & ra & op & rc unimpl
:EXTLL ra, op, rc is opcode=0x12 & ofunc=0x26 & ra & op & rc unimpl
:EXTQL ra, op, rc is opcode=0x12 & ofunc=0x36 & ra & op & rc unimpl
:EXTWH ra, op, rc is opcode=0x12 & ofunc=0x5a & ra & op & rc unimpl
:EXTLH ra, op, rc is opcode=0x12 & ofunc=0x6a & ra & op & rc unimpl
:EXTQH ra, op, rc is opcode=0x12 & ofunc=0x7a & ra & op & rc unimpl

# byte insert
:INSBL ra, op, rc is opcode=0x12 & ofunc=0x0b & ra & op & rc unimpl
:INSWL ra, op, rc is opcode=0x12 & ofunc=0x1b & ra & op & rc unimpl
:INSLL ra, op, rc is opcode=0x12 & ofunc=0x2b & ra & op & rc unimpl
:INSQL ra, op, rc is opcode=0x12 & ofunc=0x3b & ra & op & rc unimpl
:INSWH ra, op, rc is opcode=0x12 & ofunc=0x57 & ra & op & rc unimpl
:INSLH ra, op, rc is opcode=0x12 & ofunc=0x67 & ra & op & rc unimpl
:INSQH ra, op, rc is opcode=0x12 & ofunc=0x77 & ra & op & rc unimpl

# byte mask
:MSKBL ra, op, rc is opcode=0x12 & ofunc=0x02 & ra & op & rc unimpl
:MSKWL ra, op, rc is opcode=0x12 & ofunc=0x12 & ra & op & rc unimpl
:MSKLL ra, op, rc is opcode=0x12 & ofunc=0x22 & ra & op & rc unimpl
:MSKQL ra, op, rc is opcode=0x12 & ofunc=0x32 & ra & op & rc unimpl
:MSKWH ra, op, rc is opcode=0x12 & ofunc=0x52 & ra & op & rc unimpl
:MSKLH ra, op, rc is opcode=0x12 & ofunc=0x62 & ra & op & rc unimpl
:MSKQH ra, op, rc is opcode=0x12 & ofunc=0x72 & ra & op & rc unimpl

# sign extend
:SEXTB op, rc is opcode=0x1c & ofunc=0x00 & ra=31 & op & rc { rc = sext(op:1); }
:SEXTW op, rc is opcode=0x1c & ofunc=0x01 & ra=31 & op & rc { rc = sext(op:2); }

# zero bytes
:ZAP    ra, op, rc is opcode=0x12 & ofunc=0x30 & ra & op & rc unimpl
:ZAPNOT ra, op, rc is opcode=0x12 & ofunc=0x31 & ra & op & rc unimpl

#=========================================================================
# Floating-Point Instructions
#=========================================================================

# Memory Format Floating-Point Instructions
:LDF fa, disp_regb is opcode=0x20 & fa & disp_regb { fa = disp_regb; }
:LDG fa, disp_regb is opcode=0x21 & fa & disp_regb { fa = disp_regb; }
:LDS fa, disp_regb is opcode=0x22 & fa & disp_regb { fa = disp_regb; }
:LDT fa, disp_regb is opcode=0x23 & fa & disp_regb { fa = disp_regb; }

:STF fa, disp_regb is opcode=0x24 & fa & disp_regb { *:4 disp_regb = fa:4; }
:STG fa, disp_regb is opcode=0x25 & fa & disp_regb { *:8 disp_regb = fa; }
:STS fa, disp_regb is opcode=0x26 & fa & disp_regb { *:8 disp_regb = fa; }
:STT fa, disp_regb is opcode=0x27 & fa & disp_regb { *:8 disp_regb = fa; }

# Branch Format Floating-Point Instructions
:FB^fcc fa, disp_pc is bcode=0x3 & fcc & fa & disp_pc { if (fcc) goto disp_pc; }

#=========================================================================
# Miscellaneous Instructions
#=========================================================================

:CALL_PAL pal is opcode=0x00 & pal unimpl
